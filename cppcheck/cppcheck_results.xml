<?xml version="1.0" encoding="UTF-8"?>
<results version="2">
    <cppcheck version="2.7"/>
    <errors>
        <error id="funcArgNamesDifferent" severity="style" msg="Function &apos;Author&apos; argument 3 names different: declaration &apos;com&apos; definition &apos;comm&apos;." verbose="Function &apos;Author&apos; argument 3 names different: declaration &apos;com&apos; definition &apos;comm&apos;." cwe="628" inconclusive="true" file0="/home/nikolina.lazarevic/Documents/2023_Analysis_13-Git-stat/13-Git-stat/src/data/Author.cpp">
            <location file="/home/nikolina.lazarevic/Documents/2023_Analysis_13-Git-stat/13-Git-stat/src/data/Author.cpp" line="5" column="78"/>
            <location file="/home/nikolina.lazarevic/Documents/2023_Analysis_13-Git-stat/13-Git-stat/include/data/Author.h" line="19" column="79"/>
            <symbol>Author</symbol>
        </error>
        <error id="initializerList" severity="style" msg="Member variable &apos;Commit::author&apos; is in the wrong place in the initializer list." verbose="Member variable &apos;Commit::author&apos; is in the wrong place in the initializer list. Members are initialized in the order they are declared, not in the order they are in the initializer list.  Keeping the initializer list in the same order that the members were declared prevents order dependent initialization errors." cwe="398" inconclusive="true" file0="/home/nikolina.lazarevic/Documents/2023_Analysis_13-Git-stat/13-Git-stat/src/data/Commit.cpp">
            <location file="/home/nikolina.lazarevic/Documents/2023_Analysis_13-Git-stat/13-Git-stat/include/data/Commit.h" line="81" column="16"/>
            <location file="/home/nikolina.lazarevic/Documents/2023_Analysis_13-Git-stat/13-Git-stat/src/data/Commit.cpp" line="9" column="116"/>
            <symbol>Commit::author</symbol>
        </error>
        <error id="funcArgNamesDifferent" severity="style" msg="Function &apos;Commit&apos; argument 8 names different: declaration &apos;changes&apos; definition &apos;fc&apos;." verbose="Function &apos;Commit&apos; argument 8 names different: declaration &apos;changes&apos; definition &apos;fc&apos;." cwe="628" inconclusive="true" file0="/home/nikolina.lazarevic/Documents/2023_Analysis_13-Git-stat/13-Git-stat/src/data/Commit.cpp">
            <location file="/home/nikolina.lazarevic/Documents/2023_Analysis_13-Git-stat/13-Git-stat/src/data/Commit.cpp" line="8" column="91"/>
            <location file="/home/nikolina.lazarevic/Documents/2023_Analysis_13-Git-stat/13-Git-stat/include/data/Commit.h" line="57" column="33"/>
            <symbol>Commit</symbol>
        </error>
        <error id="useStlAlgorithm" severity="style" msg="Consider using std::find_if algorithm instead of a raw loop." verbose="Consider using std::find_if algorithm instead of a raw loop." cwe="398" file0="/home/nikolina.lazarevic/Documents/2023_Analysis_13-Git-stat/13-Git-stat/src/data/DataProcessing.cpp">
            <location file="/home/nikolina.lazarevic/Documents/2023_Analysis_13-Git-stat/13-Git-stat/src/data/DataProcessing.cpp" line="118" column="37"/>
        </error>
        <error id="useStlAlgorithm" severity="style" msg="Consider using std::find_if algorithm instead of a raw loop." verbose="Consider using std::find_if algorithm instead of a raw loop." cwe="398" file0="/home/nikolina.lazarevic/Documents/2023_Analysis_13-Git-stat/13-Git-stat/src/data/DataProcessing.cpp">
            <location file="/home/nikolina.lazarevic/Documents/2023_Analysis_13-Git-stat/13-Git-stat/src/data/DataProcessing.cpp" line="153" column="35"/>
        </error>
        <error id="useStlAlgorithm" severity="style" msg="Consider using std::find_if algorithm instead of a raw loop." verbose="Consider using std::find_if algorithm instead of a raw loop." cwe="398" file0="/home/nikolina.lazarevic/Documents/2023_Analysis_13-Git-stat/13-Git-stat/src/data/DataProcessing.cpp">
            <location file="/home/nikolina.lazarevic/Documents/2023_Analysis_13-Git-stat/13-Git-stat/src/data/DataProcessing.cpp" line="166" column="51"/>
        </error>
        <error id="postfixOperator" severity="performance" msg="Prefer prefix ++/-- operators for non-primitive types." verbose="Prefix ++/-- operators should be preferred for non-primitive types. Pre-increment/decrement can be more efficient than post-increment/decrement. Post-increment/decrement usually involves keeping a copy of the previous value around and adds a little extra code." cwe="398" file0="/home/nikolina.lazarevic/Documents/2023_Analysis_13-Git-stat/13-Git-stat/src/data/ProcessingComments.cpp">
            <location file="/home/nikolina.lazarevic/Documents/2023_Analysis_13-Git-stat/13-Git-stat/src/data/ProcessingComments.cpp" line="159" column="61"/>
        </error>
        <error id="redundantInitialization" severity="style" msg="Redundant initialization for &apos;err&apos;. The initialized value is overwritten before it is read." verbose="Redundant initialization for &apos;err&apos;. The initialized value is overwritten before it is read." cwe="563" file0="/home/nikolina.lazarevic/Documents/2023_Analysis_13-Git-stat/13-Git-stat/src/data/ProcessingRepo.cpp">
            <location file="/home/nikolina.lazarevic/Documents/2023_Analysis_13-Git-stat/13-Git-stat/src/data/ProcessingRepo.cpp" line="87" column="13" info="err is overwritten"/>
            <location file="/home/nikolina.lazarevic/Documents/2023_Analysis_13-Git-stat/13-Git-stat/src/data/ProcessingRepo.cpp" line="85" column="36" info="err is initialized"/>
            <symbol>err</symbol>
        </error>
        <error id="redundantInitialization" severity="style" msg="Redundant initialization for &apos;err&apos;. The initialized value is overwritten before it is read." verbose="Redundant initialization for &apos;err&apos;. The initialized value is overwritten before it is read." cwe="563" file0="/home/nikolina.lazarevic/Documents/2023_Analysis_13-Git-stat/13-Git-stat/src/data/ProcessingRepo.cpp">
            <location file="/home/nikolina.lazarevic/Documents/2023_Analysis_13-Git-stat/13-Git-stat/src/data/ProcessingRepo.cpp" line="114" column="13" info="err is overwritten"/>
            <location file="/home/nikolina.lazarevic/Documents/2023_Analysis_13-Git-stat/13-Git-stat/src/data/ProcessingRepo.cpp" line="112" column="36" info="err is initialized"/>
            <symbol>err</symbol>
        </error>
        <error id="postfixOperator" severity="performance" msg="Prefer prefix ++/-- operators for non-primitive types." verbose="Prefix ++/-- operators should be preferred for non-primitive types. Pre-increment/decrement can be more efficient than post-increment/decrement. Post-increment/decrement usually involves keeping a copy of the previous value around and adds a little extra code." cwe="398" file0="/home/nikolina.lazarevic/Documents/2023_Analysis_13-Git-stat/13-Git-stat/src/data/ProcessingRepo.cpp">
            <location file="/home/nikolina.lazarevic/Documents/2023_Analysis_13-Git-stat/13-Git-stat/src/data/ProcessingRepo.cpp" line="138" column="56"/>
        </error>
        <error id="initializerList" severity="style" msg="Member variable &apos;Repo::createdAt&apos; is in the wrong place in the initializer list." verbose="Member variable &apos;Repo::createdAt&apos; is in the wrong place in the initializer list. Members are initialized in the order they are declared, not in the order they are in the initializer list.  Keeping the initializer list in the same order that the members were declared prevents order dependent initialization errors." cwe="398" inconclusive="true" file0="/home/nikolina.lazarevic/Documents/2023_Analysis_13-Git-stat/13-Git-stat/src/data/Repo.cpp">
            <location file="/home/nikolina.lazarevic/Documents/2023_Analysis_13-Git-stat/13-Git-stat/include/data/Repo.h" line="55" column="19"/>
            <location file="/home/nikolina.lazarevic/Documents/2023_Analysis_13-Git-stat/13-Git-stat/src/data/Repo.cpp" line="9" column="34"/>
            <symbol>Repo::createdAt</symbol>
        </error>
        <error id="initializerList" severity="style" msg="Member variable &apos;Repo::webUrl&apos; is in the wrong place in the initializer list." verbose="Member variable &apos;Repo::webUrl&apos; is in the wrong place in the initializer list. Members are initialized in the order they are declared, not in the order they are in the initializer list.  Keeping the initializer list in the same order that the members were declared prevents order dependent initialization errors." cwe="398" inconclusive="true" file0="/home/nikolina.lazarevic/Documents/2023_Analysis_13-Git-stat/13-Git-stat/src/data/Repo.cpp">
            <location file="/home/nikolina.lazarevic/Documents/2023_Analysis_13-Git-stat/13-Git-stat/include/data/Repo.h" line="52" column="17"/>
            <location file="/home/nikolina.lazarevic/Documents/2023_Analysis_13-Git-stat/13-Git-stat/src/data/Repo.cpp" line="9" column="67"/>
            <symbol>Repo::webUrl</symbol>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &apos;size&apos; is assigned a value that is never used." verbose="Variable &apos;size&apos; is assigned a value that is never used." cwe="563" file0="/home/nikolina.lazarevic/Documents/2023_Analysis_13-Git-stat/13-Git-stat/src/gui/AllReposPage.cpp">
            <location file="/home/nikolina.lazarevic/Documents/2023_Analysis_13-Git-stat/13-Git-stat/src/gui/AllReposPage.cpp" line="79" column="14"/>
            <symbol>size</symbol>
        </error>
        <error id="useStlAlgorithm" severity="style" msg="Consider using std::any_of algorithm instead of a raw loop." verbose="Consider using std::any_of algorithm instead of a raw loop." cwe="398" file0="/home/nikolina.lazarevic/Documents/2023_Analysis_13-Git-stat/13-Git-stat/src/network/ProjectContext.cpp">
            <location file="/home/nikolina.lazarevic/Documents/2023_Analysis_13-Git-stat/13-Git-stat/src/network/ProjectContext.cpp" line="55" column="38"/>
        </error>
        <error id="missingInclude" severity="information" msg="Cppcheck cannot find all the include files (use --check-config for details)" verbose="Cppcheck cannot find all the include files. Cppcheck can check the code without the include files found. But the results will probably be more accurate if all the include files are found. Please check your project&apos;s include directories and add all of them as include directories for Cppcheck. To see what files Cppcheck cannot find use --check-config."/>
    </errors>
</results>
